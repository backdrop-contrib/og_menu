<?php
/**
 * @file
 * Install, update and uninstall functions for the og_menu module.
 */

/**
 * Implements hook_schema().
 */
function og_menu_schema() {
  $schema = array();

  $schema['og_menu'] = array(
    'description' => 'Stores relationships between organic groups and their custom menus.',
    'fields' => array(
      'menu_name' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'gid' => array(
        'description' => "The group's unique ID.",
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'group_type' => array(
        'description' => "The group's entity type (e.g., node, comment, etc').",
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => "The menu weight for each group menu.",
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('menu_name'),
    'indexes' => array(
      'gid_group_type_weight' => array('gid', 'group_type', 'weight'),
    ),
    'foreign keys' => array(
      'menu_custom' => array(
        'table' => 'menu_custom',
        'columns' => array(
          'menu_name' => 'menu_name',
        ),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function og_menu_uninstall() {
  // Delete custom menus.
  $result = db_select('og_menu', 'm')
    ->fields('m', array('menu_name'))
    ->execute();

  while ($record = $result->fetchAssoc()) {
    if ($menu = menu_load($record['menu_name'])) {
      menu_delete($menu);
    }
  }
}

/**
 * Implements hook_update_last_removed().
 */
function og_menu_update_last_removed() {
  return 7308;
}

 /**
 * Move settings from variables to config.
 */
function og_menu_update_1000() {
  // Migrate variables to config.
  $config = config('og_menu.settings');
  $config->set('og_menu_assignment', update_variable_get('og_menu_assignment', 'autocomplete'));
  $config->set('og_menu_block_links', update_variable_get('og_menu_block_links', FALSE));
  $config->set('og_menu_hide_create_option', update_variable_get('og_menu_hide_create_option', FALSE));
  $config->set('og_menu_show_nodetype', update_variable_get('og_menu_show_nodetype', FALSE));
  $config->set('og_menu_show_menuposition', update_variable_get('og_menu_show_menuposition', FALSE));
  $config->set('og_menu_show_blocks', update_variable_get('og_menu_show_blocks', FALSE));
  $config->set('og_menu_show_homebox', update_variable_get('og_menu_show_homebox', FALSE));
  $config->set('og_menu_create_by_default', update_variable_get('og_menu_create_by_default', FALSE));
  $config->set('og_menu_context_limit', update_variable_get('og_menu_context_limit', FALSE));
  $config->set('og_menu_max_menus_per_group', update_variable_get('og_menu_max_menus_per_group', 1));
  $node_types = node_type_get_types();
  $menu_enabled_config = [];
  foreach ($node_types as $type) {
    $enabled = update_variable_get('og_menu_enable_' . $type, FALSE);
    if ($enabled) {
      $menu_enabled_config[] = $type;
    }
  }
  $config->set('og_menu_enable', $menu_enabled_config);
  $config->save();

  // Delete variables.
  update_variable_del('og_menu_assignment');
  update_variable_del('og_menu_block_links');
  update_variable_del('og_menu_hide_create_option');
  update_variable_del('og_menu_show_nodetype');
  update_variable_del('og_menu_show_menuposition');
  update_variable_del('og_menu_show_blocks');
  update_variable_del('og_menu_show_homebox');
  update_variable_del('og_menu_create_by_default');
  update_variable_del('og_menu_context_limit');
  update_variable_del('og_menu_max_menus_per_group');
  foreaech ($node_types as $type) {
    update_variable_del('og_menu_enable_' . $type);
  }
}
